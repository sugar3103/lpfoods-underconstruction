{"version":3,"sources":["components/Main/Main1st/index.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["Main1st","className","src","alt","href","App","exact","path","render","propsOfRouter","onEnter","window","location","reload","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAsCeA,MAnCf,WACE,OACE,oCACE,6BAASC,UAAU,OACjB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,kBACb,yBAAKC,IAAI,mBAAmBC,IAAI,aAChC,6BACA,yBAAKD,IAAI,qBAAqBC,IAAI,gBAEpC,yBAAKF,UAAU,qBACb,yBAAKC,IAAI,wBAAwBC,IAAI,mBAEvC,yBAAKF,UAAU,gBACb,yCACA,kDACA,0GAKF,yBAAKA,UAAU,wBACb,uBAAGG,KAAK,+BACN,yBAAKF,IAAI,+BAA+BC,IAAI,sBAE9C,uBAAGC,KAAK,0BACN,yBAAKF,IAAI,0BAA0BC,IAAI,sBCLtCE,MAnBf,WAEE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,SAAAC,GAAa,OAAI,kBAAC,EAAYA,MAExC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,eAAeG,QAV1B,kBAAMC,OAAOC,SAASC,gBCMnBC,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.24358339.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.scss\";\n\nfunction Main1st() {\n  return (\n    <>\n      <section className=\"App\">\n        <div className=\"main1st-wrapper\">\n          <div className=\"main1st-header\">\n            <img src=\"/assets/logo.png\" alt=\"logo img\" />\n            <br></br>\n            <img src=\"/assets/slogan.png\" alt=\"slogan img\" />\n          </div>\n          <div className=\"main1st-construct\">\n            <img src=\"/assets/construct.png\" alt=\"construct img\" />\n          </div>\n          <div className=\"main1st-opps\">\n            <strong>Oops!</strong>\n            <h1>Under Construction</h1>\n            <p>\n              We will be back with a better website. Mean while visit our others\n              Brands.\n            </p>\n          </div>\n          <div className=\"main1st-other-brands\">\n            <a href=\"http://aminoacidshrimps.com\">\n              <img src=\"/assets/aminoacidshrimps.png\" alt=\"aminoacidshrimps\" />\n            </a>\n            <a href=\"http://sautenserve.com\">\n              <img src=\"/assets/sautenserve.png\" alt=\"sautenserve\" />\n            </a>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default Main1st;\n","import React from \"react\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Main1st from \"./components/Main/Main1st\";\n\nfunction App() {\n  const reload = () => window.location.reload();\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={propsOfRouter => <Main1st {...propsOfRouter} />}\n          />\n          <Route exact path=\"/report.html\" onEnter={reload} />\n        </Switch>\n      </Router>\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}